{"id":"../node_modules/date-fns/toDate.js","dependencies":[{"name":"D:\\node\\parcel-experiment\\package.json","includedInParent":true,"mtime":1732269817943},{"name":"D:\\node\\parcel-experiment\\node_modules\\date-fns\\package.json","includedInParent":true,"mtime":1732244774837},{"name":"./constructFrom.js","loc":{"line":1,"column":30,"index":30},"parent":"D:\\node\\parcel-experiment\\node_modules\\date-fns\\toDate.js","resolved":"D:\\node\\parcel-experiment\\node_modules\\date-fns\\constructFrom.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nexports.toDate = toDate;\nvar _constructFrom = require(\"./constructFrom.js\");\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * Starting from v3.7.0, it clones a date using `[Symbol.for(\"constructDateFrom\")]`\n * enabling to transfer extra properties from the reference date to the new date.\n * It's useful for extensions like [`TZDate`](https://github.com/date-fns/tz)\n * that accept a time zone as a constructor argument.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param argument - The value to convert\n *\n * @returns The parsed date in the local time zone\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\nfunction toDate(argument, context) {\n  // [TODO] Get rid of `toDate` or `constructFrom`?\n  return (0, _constructFrom.constructFrom)(context || argument, argument);\n}\n\n// Fallback for modularized imports:\nvar _default = exports.default = toDate;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":0},"source":"../node_modules/date-fns/toDate.js","original":{"line":1,"column":0}},{"generated":{"line":8,"column":4},"source":"../node_modules/date-fns/toDate.js","original":{"line":1,"column":0},"name":"_constructFrom"},{"generated":{"line":8,"column":18},"source":"../node_modules/date-fns/toDate.js","original":{"line":1,"column":0}},{"generated":{"line":8,"column":21},"source":"../node_modules/date-fns/toDate.js","original":{"line":1,"column":0},"name":"require"},{"generated":{"line":8,"column":28},"source":"../node_modules/date-fns/toDate.js","original":{"line":1,"column":0}},{"generated":{"line":9,"column":0},"source":"../node_modules/date-fns/toDate.js","original":{"line":3,"column":0}},{"generated":{"line":10,"column":0},"source":"../node_modules/date-fns/toDate.js","original":{"line":4,"column":0}},{"generated":{"line":11,"column":0},"source":"../node_modules/date-fns/toDate.js","original":{"line":5,"column":0}},{"generated":{"line":12,"column":0},"source":"../node_modules/date-fns/toDate.js","original":{"line":6,"column":0}},{"generated":{"line":13,"column":0},"source":"../node_modules/date-fns/toDate.js","original":{"line":7,"column":0}},{"generated":{"line":14,"column":0},"source":"../node_modules/date-fns/toDate.js","original":{"line":8,"column":0}},{"generated":{"line":15,"column":0},"source":"../node_modules/date-fns/toDate.js","original":{"line":9,"column":0}},{"generated":{"line":16,"column":0},"source":"../node_modules/date-fns/toDate.js","original":{"line":10,"column":0}},{"generated":{"line":17,"column":0},"source":"../node_modules/date-fns/toDate.js","original":{"line":11,"column":0}},{"generated":{"line":18,"column":0},"source":"../node_modules/date-fns/toDate.js","original":{"line":12,"column":0}},{"generated":{"line":19,"column":0},"source":"../node_modules/date-fns/toDate.js","original":{"line":13,"column":0}},{"generated":{"line":20,"column":0},"source":"../node_modules/date-fns/toDate.js","original":{"line":14,"column":0}},{"generated":{"line":21,"column":0},"source":"../node_modules/date-fns/toDate.js","original":{"line":15,"column":0}},{"generated":{"line":22,"column":0},"source":"../node_modules/date-fns/toDate.js","original":{"line":16,"column":0}},{"generated":{"line":23,"column":0},"source":"../node_modules/date-fns/toDate.js","original":{"line":17,"column":0}},{"generated":{"line":24,"column":0},"source":"../node_modules/date-fns/toDate.js","original":{"line":18,"column":0}},{"generated":{"line":25,"column":0},"source":"../node_modules/date-fns/toDate.js","original":{"line":19,"column":0}},{"generated":{"line":26,"column":0},"source":"../node_modules/date-fns/toDate.js","original":{"line":20,"column":0}},{"generated":{"line":27,"column":0},"source":"../node_modules/date-fns/toDate.js","original":{"line":21,"column":0}},{"generated":{"line":28,"column":0},"source":"../node_modules/date-fns/toDate.js","original":{"line":22,"column":0}},{"generated":{"line":29,"column":0},"source":"../node_modules/date-fns/toDate.js","original":{"line":23,"column":0}},{"generated":{"line":30,"column":0},"source":"../node_modules/date-fns/toDate.js","original":{"line":24,"column":0}},{"generated":{"line":31,"column":0},"source":"../node_modules/date-fns/toDate.js","original":{"line":25,"column":0}},{"generated":{"line":32,"column":0},"source":"../node_modules/date-fns/toDate.js","original":{"line":26,"column":0}},{"generated":{"line":33,"column":0},"source":"../node_modules/date-fns/toDate.js","original":{"line":27,"column":0}},{"generated":{"line":34,"column":0},"source":"../node_modules/date-fns/toDate.js","original":{"line":28,"column":0}},{"generated":{"line":35,"column":0},"source":"../node_modules/date-fns/toDate.js","original":{"line":29,"column":0}},{"generated":{"line":36,"column":0},"source":"../node_modules/date-fns/toDate.js","original":{"line":30,"column":0}},{"generated":{"line":37,"column":0},"source":"../node_modules/date-fns/toDate.js","original":{"line":31,"column":0}},{"generated":{"line":38,"column":0},"source":"../node_modules/date-fns/toDate.js","original":{"line":32,"column":0}},{"generated":{"line":39,"column":0},"source":"../node_modules/date-fns/toDate.js","original":{"line":33,"column":0}},{"generated":{"line":40,"column":0},"source":"../node_modules/date-fns/toDate.js","original":{"line":34,"column":0}},{"generated":{"line":41,"column":0},"source":"../node_modules/date-fns/toDate.js","original":{"line":35,"column":0}},{"generated":{"line":42,"column":0},"source":"../node_modules/date-fns/toDate.js","original":{"line":36,"column":0}},{"generated":{"line":43,"column":0},"source":"../node_modules/date-fns/toDate.js","original":{"line":37,"column":0}},{"generated":{"line":44,"column":0},"source":"../node_modules/date-fns/toDate.js","original":{"line":38,"column":0}},{"generated":{"line":45,"column":0},"source":"../node_modules/date-fns/toDate.js","original":{"line":39,"column":0}},{"generated":{"line":46,"column":0},"source":"../node_modules/date-fns/toDate.js","original":{"line":40,"column":0}},{"generated":{"line":47,"column":0},"source":"../node_modules/date-fns/toDate.js","original":{"line":41,"column":7}},{"generated":{"line":47,"column":9},"source":"../node_modules/date-fns/toDate.js","original":{"line":41,"column":16},"name":"toDate"},{"generated":{"line":47,"column":15},"source":"../node_modules/date-fns/toDate.js","original":{"line":41,"column":22},"name":"toDate"},{"generated":{"line":47,"column":16},"source":"../node_modules/date-fns/toDate.js","original":{"line":41,"column":23},"name":"argument"},{"generated":{"line":47,"column":24},"source":"../node_modules/date-fns/toDate.js","original":{"line":41,"column":31}},{"generated":{"line":47,"column":26},"source":"../node_modules/date-fns/toDate.js","original":{"line":41,"column":33},"name":"context"},{"generated":{"line":47,"column":33},"source":"../node_modules/date-fns/toDate.js","original":{"line":41,"column":40}},{"generated":{"line":47,"column":35},"source":"../node_modules/date-fns/toDate.js","original":{"line":41,"column":42}},{"generated":{"line":48,"column":2},"source":"../node_modules/date-fns/toDate.js","original":{"line":42,"column":2}},{"generated":{"line":49,"column":2},"source":"../node_modules/date-fns/toDate.js","original":{"line":43,"column":2}},{"generated":{"line":49,"column":9},"source":"../node_modules/date-fns/toDate.js","original":{"line":43,"column":9}},{"generated":{"line":49,"column":13},"source":"../node_modules/date-fns/toDate.js","original":{"line":43,"column":9},"name":"constructFrom"},{"generated":{"line":49,"column":41},"source":"../node_modules/date-fns/toDate.js","original":{"line":43,"column":22}},{"generated":{"line":49,"column":43},"source":"../node_modules/date-fns/toDate.js","original":{"line":43,"column":23},"name":"context"},{"generated":{"line":49,"column":50},"source":"../node_modules/date-fns/toDate.js","original":{"line":43,"column":30}},{"generated":{"line":49,"column":54},"source":"../node_modules/date-fns/toDate.js","original":{"line":43,"column":34},"name":"argument"},{"generated":{"line":49,"column":62},"source":"../node_modules/date-fns/toDate.js","original":{"line":43,"column":42}},{"generated":{"line":49,"column":64},"source":"../node_modules/date-fns/toDate.js","original":{"line":43,"column":44},"name":"argument"},{"generated":{"line":49,"column":72},"source":"../node_modules/date-fns/toDate.js","original":{"line":43,"column":52}},{"generated":{"line":49,"column":73},"source":"../node_modules/date-fns/toDate.js","original":{"line":43,"column":53}},{"generated":{"line":50,"column":0},"source":"../node_modules/date-fns/toDate.js","original":{"line":44,"column":0}},{"generated":{"line":52,"column":0},"source":"../node_modules/date-fns/toDate.js","original":{"line":46,"column":0}},{"generated":{"line":53,"column":0},"source":"../node_modules/date-fns/toDate.js","original":{"line":46,"column":0}},{"generated":{"line":53,"column":4},"source":"../node_modules/date-fns/toDate.js","original":{"line":46,"column":0},"name":"_default"},{"generated":{"line":53,"column":12},"source":"../node_modules/date-fns/toDate.js","original":{"line":46,"column":0}},{"generated":{"line":53,"column":15},"source":"../node_modules/date-fns/toDate.js","original":{"line":46,"column":0},"name":"exports"},{"generated":{"line":53,"column":22},"source":"../node_modules/date-fns/toDate.js","original":{"line":46,"column":0}},{"generated":{"line":53,"column":23},"source":"../node_modules/date-fns/toDate.js","original":{"line":46,"column":0},"name":"default"},{"generated":{"line":53,"column":30},"source":"../node_modules/date-fns/toDate.js","original":{"line":46,"column":0}},{"generated":{"line":53,"column":33},"source":"../node_modules/date-fns/toDate.js","original":{"line":47,"column":15},"name":"toDate"},{"generated":{"line":53,"column":39},"source":"../node_modules/date-fns/toDate.js","original":{"line":47,"column":21}}],"sources":{"../node_modules/date-fns/toDate.js":"import { constructFrom } from \"./constructFrom.js\";\n\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * Starting from v3.7.0, it clones a date using `[Symbol.for(\"constructDateFrom\")]`\n * enabling to transfer extra properties from the reference date to the new date.\n * It's useful for extensions like [`TZDate`](https://github.com/date-fns/tz)\n * that accept a time zone as a constructor argument.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param argument - The value to convert\n *\n * @returns The parsed date in the local time zone\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\nexport function toDate(argument, context) {\n  // [TODO] Get rid of `toDate` or `constructFrom`?\n  return constructFrom(context || argument, argument);\n}\n\n// Fallback for modularized imports:\nexport default toDate;\n"},"lineCount":null}},"error":null,"hash":"b539aa7cae3b60fefff855f64f8e6920","cacheData":{"env":{}}}